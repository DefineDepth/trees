$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  // xl: 1140px,
  xl: 1580px,
  // xxl: 1320px
  // xxl: 1580px
);

$breakpoints: (
  xs: 576px,
  sm: 768px,
  md: 992px,
  lg: 1200px,
  xl: 1600px,
);

// $breakpoints: (
//   xs: 0,
//   sm: 576px,
//   md: 768px,
//   lg: 992px,
//   xl: 1200px,
//   // xxl: 1400px
//   xxl: 1600px
// );

@mixin media-above($breakpoint) {
  $breakpoint-value: map-get($breakpoints, $breakpoint);

  @media (min-width: $breakpoint-value) {
    @content;
  }
}

@mixin media-below($breakpoint) {
  $breakpoint-value: map-get($breakpoints, $breakpoint);

  @media (max-width: ($breakpoint-value - 1)) {
    @content;
  }
}

@mixin media-between($lower, $upper) {
  $lower-breakpoint: map-get($breakpoints, $lower);
  $upper-breakpoint: map-get($breakpoints, $upper);

  @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
    @content;
  }
}



.ratio {
  position: relative;
  display: block;
  overflow: hidden;

  &::before {
    display: block;
    width: 100%;
    content: "";
  }
}

$aspect-ratios: ((1:1),
  (2:1),
  (2:3),
  (3:2),
  (3:4),
  (4:3),
  (16:9)) !default;

//
// Generate a series of ratio classes to be used like so:
//
// @example
//   <div class="ratio ratio-16:9">
//
//
@each $ratio in $aspect-ratios {

  @each $antecedent,
  $consequent in $ratio {
    @if (type-of($antecedent) !=number) {
      @error "`#{$antecedent}` needs to be a number."
    }

    @if (type-of($consequent) !=number) {
      @error "`#{$consequent}` needs to be a number."
    }

    &.ratio-#{$antecedent}\:#{$consequent}::before {
      padding-bottom: ($consequent/$antecedent) * 100%;
    }
  }
}
